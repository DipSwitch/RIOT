From dd529c0e312926cff978df2fee7918b30b1e6ec4 Mon Sep 17 00:00:00 2001
From: DipSwitch <dipswitch@ownage4u.nl>
Date: Tue, 22 Sep 2015 14:25:23 +0200
Subject: [PATCH 3/3] Change flag from DEBUG to MICROCOAP_DEBUG

---
 coap.c | 10 +++++-----
 coap.h | 17 ++++++++++++++++-
 2 files changed, 21 insertions(+), 6 deletions(-)

diff --git a/coap.c b/coap.c
index 4d036f5..ae99b43 100644
--- a/coap.c
+++ b/coap.c
@@ -9,7 +9,7 @@
 extern void endpoint_setup(void);
 extern const coap_endpoint_t endpoints[];
 
-#ifdef DEBUG
+#ifdef MICROCOAP_DEBUG
 void coap_dumpHeader(coap_header_t *hdr)
 {
     printf("Header:\n");
@@ -21,7 +21,7 @@ void coap_dumpHeader(coap_header_t *hdr)
 }
 #endif
 
-#ifdef DEBUG
+#ifdef MICROCOAP_DEBUG
 void coap_dump(const uint8_t *buf, size_t buflen, bool bare)
 {
     if (bare)
@@ -186,7 +186,7 @@ int coap_parseOptionsAndPayload(coap_option_t *options, uint8_t *numOptions, coa
     return 0;
 }
 
-#ifdef DEBUG
+#ifdef MICROCOAP_DEBUG
 void coap_dumpOptions(coap_option_t *opts, size_t numopt)
 {
     size_t i;
@@ -200,7 +200,7 @@ void coap_dumpOptions(coap_option_t *opts, size_t numopt)
 }
 #endif
 
-#ifdef DEBUG
+#ifdef MICROCOAP_DEBUG
 void coap_dumpPacket(coap_packet_t *pkt)
 {
     coap_dumpHeader(&pkt->hdr);
@@ -288,7 +288,7 @@ int coap_build(uint8_t *buf, size_t *buflen, const coap_packet_t *pkt)
     if (pkt->hdr.tkl > 0)
         memcpy(p, pkt->tok.p, pkt->hdr.tkl);
 
-    // // http://tools.ietf.org/html/rfc7252#section-3.1
+    // http://tools.ietf.org/html/rfc7252#section-3.1
     // inject options
     p += pkt->hdr.tkl;
 
diff --git a/coap.h b/coap.h
index 9090285..27ce845 100644
--- a/coap.h
+++ b/coap.h
@@ -131,7 +131,12 @@ typedef enum
 ///////////////////////
 
 typedef int (*coap_endpoint_func)(coap_rw_buffer_t *scratch, const coap_packet_t *inpkt, coap_packet_t *outpkt, uint8_t id_hi, uint8_t id_lo);
+/* To increase COAP_MAX_SEGMENTS, set CFLAGS to -DCOAP_MAX_SEGMENTS=<your value>. */
+#ifndef COAP_MAX_SEGMENTS
 #define MAX_SEGMENTS 2  // 2 = /foo/bar, 3 = /foo/bar/baz
+#else
+#define MAX_SEGMENTS (COAP_MAX_SEGMENTS)
+#endif
 typedef struct
 {
     int count;
@@ -154,12 +159,22 @@ typedef struct
 
 
 ///////////////////////
+#ifdef MICROCOAP_DEBUG
 void coap_dumpPacket(coap_packet_t *pkt);
+#else
+#define coap_dumpPacket(pkt)
+#endif
+
+#ifdef MICROCOAP_DEBUG
+void coap_dump(const uint8_t *buf, size_t buflen, bool bare);
+#else
+#define coap_dump(buf, buflen, bare)
+#endif
+
 int coap_parse(coap_packet_t *pkt, const uint8_t *buf, size_t buflen);
 int coap_buffer_to_string(char *strbuf, size_t strbuflen, const coap_buffer_t *buf);
 const coap_option_t *coap_findOptions(const coap_packet_t *pkt, uint8_t num, uint8_t *count);
 int coap_build(uint8_t *buf, size_t *buflen, const coap_packet_t *pkt);
-void coap_dump(const uint8_t *buf, size_t buflen, bool bare);
 int coap_make_response(coap_rw_buffer_t *scratch, coap_packet_t *pkt, const uint8_t *content, size_t content_len, uint8_t msgid_hi, uint8_t msgid_lo, const coap_buffer_t* tok, coap_responsecode_t rspcode, coap_content_type_t content_type);
 int coap_handle_req(coap_rw_buffer_t *scratch, const coap_packet_t *inpkt, coap_packet_t *outpkt);
 void coap_option_nibble(uint32_t value, uint8_t *nibble);
-- 
2.1.4

